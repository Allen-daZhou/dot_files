# -*- mode: ruby; -*-

def find_auth_token(id)
  index_name = 'spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:%s' % id
  result = smembers(index_name).map do |quoted_token|
    token = quoted_token.gsub(/"/, '')
    key = 'spring:session:sessions:%s' % token
    next unless exists(key)
    creation_time = Time.at(hget(key, 'creationTime').to_i / 1000)
    max_inactive_interval = hget(key, 'maxInactiveInterval').to_i
    last_accessed_time = Time.at(hget(key, 'lastAccessedTime').to_i / 1000)
    expire_time = creation_time + max_inactive_interval
    expired = expire_time < Time.now
    expired_tag = expired ? '✕' : '✓'
    [expired_tag, token, creation_time, last_accessed_time, max_inactive_interval, expire_time, expired]
  end.compact.sort_by { |e| e[2] }.reverse.each do |e|
    puts '%s Auth Token: %s, Created: %s, Last Access: %s, Interval: %ds, Expire: %s, Expired: %s' % e
  end;
end

def active_users
  keys.grep(/spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME/).map { |e| e.split('PRINCIPAL_NAME_INDEX_NAME:')[1]}
end

def list_active_users
  active_users.each do |user|
    puts("\n#{user}:")
    fat(user)
  end
end

def fat(id)
  find_auth_token(id)
end
